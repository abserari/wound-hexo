<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Back-to-Blog]]></title>
    <url>%2F2019%2F07%2F17%2Fback-to-blog%2F</url>
    <content type="text"><![CDATA[我开始重新作为一个博客选手开始写作。当然，这其实是说在这里继续进行网站托管的博客。 尽量选择技术类文章进行发布，关于自己的感受和感想，在语雀上进行编写。如果合适再放到这里。 由于研究精力有限，想必我写的技术文章会比较少，这会造成虽然我的感想这类文章，或者我的立场观念得到的结论是经过挑选之后才放上来的。比例依旧会有一些失衡。 我决定再做一些东西的时候，分成两个部分的文档可以发出： 一是关于这个项目的设计思路，或者问题的解答思路 比如解决什么问题先 抓住哪一个关键字，无论是搜索还是做其他什么工作，都需要这样。 或者收集起来，我通过搜索搜集到的文章。也就是设计的时候参考过的东西。 二是关于这个项目的总结文档或者是描述性的博客。 比如：如何使用这一个项目 总结的话就是 ，在这个项目中我学到了什么。 欢迎留言讨论，应该是我之后的所有的文章应该带上的页尾了。希望这样能促进我和大家相互交流，相互提升。也希望大家能够指正我的一些错误。]]></content>
      <categories>
        <category>思考</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Slack-Github]]></title>
    <url>%2F2019%2F05%2F31%2Fslack-github%2F</url>
    <content type="text"><![CDATA[Slack 的机器人🤖️很有趣啊有机会做一做自己的机器人玩一玩]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>slack</tag>
        <tag>GitHub</tag>
        <tag>bot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信源]]></title>
    <url>%2F2019%2F05%2F30%2F%E4%BF%A1%E6%BA%90%2F</url>
    <content type="text"><![CDATA[技术猫想要赋能学生，当然是希望他们能够在学生的时候就能够拥有实现自己想法的力量。 编程作为一个无阶级的能力，在互联网这个资源可循的地点。想要学习编程实在是太容易了。世界通过互联网展现在我们眼前。而我们缺少的却是从中发现宝藏的能力。 在这个信息爆炸的年代，我们能够获取信息的途径正越来越多。 各类信息通过各种文字 APP，图片 APP，视频 APP 乃至微信朋友圈传达到你面前。 任何一个新闻都可以在发酵后的1天内传遍整个世界。 看起来人们正在获取越来越大的信息透明度，每个人对于世界的认知都在极速扩展，似乎人与人之间即将因为消除信息差而解除一切隔阂。 但我觉得不是这样的，我们并没有因为信息加速传输而变得更加开明，反而是在变得更加闭塞，而且每个人都在变得更加极端，人与人之间的包容性也在变差。 因为我们虽然看到了世界，但是每个人看到的世界都完全不一样。 最近看半佛仙人的文章，确实还有很多的人无法过滤信源。他们不仅无法自己过滤。甚至被各种信源掌控着无法自拔。 技术也是如此，非常多优秀的技术总是在国外诞生的。我们不考虑环境问题，但是当存在这些优秀的技术的时候，我们为什么要固步自封不去学习呢。互联网时代，闭门造车已经是不可行的了。 常常说为什么要学习先进的技术。我揭露一个残酷的事实。 世界在发展 而他发展的速度是人远远跟不上的。你说到现在为止，人类进化了什么，进化了多少。而其他的东西又是怎样爆炸式的增长。想想吧，仅仅是前年，甚至是去年的东西，你现在再想起来，是否觉得已经老掉牙了。 每出一门新技术，大家高呼，哇，改变世界，划时代的壮举。然而呢。 工具的进化的确让边界内的行为富有效率，然后之前的边界也被打破了。出现了更多的行为模式，这些人能接受的又有多少。 悲观的想，人类会逐渐被自己淘汰。 有人推动，也有人追赶，很不幸，大多数人是追赶者，甚至连望尘莫及的资格都没有。 打破信息壁垒，让所有的信息能够被自由获取是非常大的进步。迫于形势原因，有些东西无法做到。但是技术这种东西，其实大部分时候是没有刻意去屏蔽的。 如果能有人一起，通过自己的力量作为信息中介，或者整理信源的过滤器，逐渐积累下，有希望影响的人越来越多。然而现在嘈杂的自媒体，所谓劣币驱逐良币的现象，让信息的每一个推广都变得更加困难。 搞得信息获取变成了懂行者的专利。 另一方面，没有经验的人又无法迅速分辨信息的真实可靠。总的信息信用也在逐渐降低。这不得不让我思考🤔这个吃瓜和所谓微博发声的环境，头条推送新闻的方式到底是好是坏。 当然，并不是所有确立了边界的东西都能够在边界之内活动。原先可信的信源也可能因为各种原因改变其性质。 有没有一种可能，能够把各个因素降低呢？]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>信源</tag>
        <tag>技术猫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天行健]]></title>
    <url>%2F2019%2F05%2F11%2Ftwenty%2F</url>
    <content type="text"><![CDATA[地势坤混沌开，分阴阳。 人生的第二个十年结束了。 没想到我更适合在晚上不被打扰。还是高估了自己的抗干扰能力。 天道无常，拥抱变化才是拥抱未来。要登上高峰，必须给自己系上谦虚的绳索。但并不是安全绳。 我会是最出色的游戏设计师，当我崇拜的英雄都挂掉的时候。当我是最透明的时候，我也会随之而去。 而明天会是新的一天。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>wound</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[流派]]></title>
    <url>%2F2019%2F05%2F11%2F%E6%B5%81%E6%B4%BE%2F</url>
    <content type="text"><![CDATA[流派 1 念叨既然作为一个游戏来发展了，那么就是说，对于技术猫来说不同的流派是非有不可了。但是流派这种东西好像是修炼心法的不同，而对于我们来说可能就是程序员思想的不同了。毕竟语言对于我们来讲只是工具，难道使用工具的不同也需要分成流派吗？我觉得不是的，所以一直有流派的这个想法，后来却发现可能对于我们来讲，或许都算飞哥这一支的？emmm，但是每个人有都有一套自己的学习方法，这会导致心智模式的不同，或者说是心智模式不同来导致的。如果真的存在心法的话，想必修炼的也是心智模式来排除心魔啥的？然后功力就体现在经验和编程上。这样一想，在技术猫的每个人都是有一个自己的流派。在技术猫的学习是尽量以保持其个性的教学，因为希望教出的不是批量生产的码农。这样或许每一个技术猫成员都能铸就流派？或许。 2 嗯其实还是能够有流派的。即使修习的是一样的心法，但是使用的兵器不同也是不同的山门。自然使用的技术栈不同也可以是不同的流派。同时也会有不同的思考方式和心智模式，只是说依旧能够非常方便的交流。不同的方向就是不同的流派不如说不同的技术栈造就了不同的方式。不仅是使用语言的不同，还有框架的不同，使用的工具的不同，或者研究的方向不同。这些个组合都能成为异化的标志。 那么技术猫的设计就换样子了。变成了设计不同的功能模块或者说多个系统。比如知识库系统，任务系统，成就系统，等级系统，而这些实际上都是为了愿景努力。为了在为同一个愿景努力的人们提供服务和方便，维护一个共同努力的社区罢了。 也就是说，当开始进入技术猫这个游戏的时候。跟随这一个游戏的引导，做到一个故事中英雄所做的那样，实现自我的提升之后将新的力量带回自己原来的环境，重新创造。如《千面英雄》。如果是作为游戏的话，也会把技术猫这个属性摘得更远，不完全认同技术猫的人可能也会选择玩一玩这个游戏。要是作为组织的话，不同的人会有不同的抵触心理。再说作为游戏也不是没有一个组织来制定规则，这不也包含了嘛。想加入组织的人自然会知道游戏的本质。 3 实际编程确实是一直有这样的流派之争，或者说语言圣战等等。说到底其实算是维护自己的利益或者保护自己的选择。如果能有一个概念来切实包含这些东西呢？其实也不是没有，只是没有像一，二这样中二的表示。每天工作和提升自己已经很累了，也有自己的兴趣，为什么要给自己的行为或者选择框上一个概念呢？这有点像出征的时候需要师出有名。有言“得道者多助，失道者寡助”，这也是大家愿意给自己安上一个名头的原因吧。说到底，其实怎样表示是无所谓的事，对于做事的我们来讲，只要能够实现愿景达到我们的目的，何乐而不为呢？对于我们想要争取的力量来说，有一个专属于这个游戏，专属于一个开源组织，专属于技术猫的界定方式，或许是能更好接受然后感染的。再说我们的设定也不是违背着现在的划分，不是说现在怎么想我们一定要标新立异的另一种想法。希望的自然是能通过这样的概念产生认同感，然后让彼此能够更加序列化的为自己的想法努力，就像工作虽然每天8小时，但是为了自己想做的事，即使007也不嫌多。 我也不清楚现在为止到底说了些什么，或许是关于技术猫的系统，或许是让它更容易接受，现在我们对技术猫的调整是想让他更符合我们这样的学生开发者。其作为我们的帮助者来设计，才能真正对我们有所帮助，有可能是因为我们现在无事可做，于是想到了技术猫，围绕这个主题进行编程的开发不也是可以看看集体一起生产能作出多大的影响吗？一开始设计的技术猫的受益者就是包括我们本身的。 不过赋能给学生倒是肯定的，做出的项目为学生开发服务，做出的组织为学生开发者社区服务，做出的理念和规约为学生能够找到集体增加开发生产力服务，也促进开源发展，虽然这些现在还是预想的事情，但是愿景不也确立了一点吗？赋能给学生，让学生的生产力也能通过他们的想象改变世界（虽然这个改变不会像他们想象中那么多罢了）。谁年轻时不想能够改变世界呢，谁年轻时又会承认自己无能为力呢？编程是一项极富创造力的技能，能够给这样的人提供非常大的帮助，我们作出这样一个为这样的开发者赋能的组织，改变的又是多少呢？或许能促进很多自己想象中的事情发生吧。 4 想象另一个是因为现在编程也有教育资源的说法，不同地域的教育资源一定是不平衡的，自然也会有编程技能的偏向的区别，我们虽然崇尚信息自由，但是最落后的人并没有享受到最大的帮助是现在没有办法的事。不同的编程教学方法和教育环境自然大有不同，成就不同的流派也理所当然（又回到了玄幻的说法了）。或许之后的各个地区的竞争就是不同编程的方法的竞争啊，你想，不可能每一个地方的老师都能会所有的编程技巧。那么自然只能自己会什么教什么。当然存在网络这个东西能让大家都能较为轻松的获取自己的资源，但是编程融入教科书之后，系统的学习和网上的搜寻就使得老师教不了部分只能变成兴趣了。这也是不同地域进一步异化的原因。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Do IT First]]></title>
    <url>%2F2019%2F05%2F11%2FDo-IT-First%2F</url>
    <content type="text"><![CDATA[Do It First &amp; Iteration怎样学习，快速迭代，阶级跳跃。 技术和框架都很多，同时也在以我们无法掌控的速度飞速增长，有一些核心不会变，有一些变化，更甚者抛弃一些核心的东西另辟蹊径。这种情况下学习变得很困难，信息流巨大杂乱无章。我建议是迈出第一步，一步一步做下去，志向再远大，实际也要一步一步走。 Do It First 是我早就尝试过的一种行为模式，每当我转换这种模式的时候，会觉得有所得和充实，同时觉得自己无所不能（一部分是由于接触工程师思想较多）。在 DIF 的时候，首先不会感觉到想的太多，做的太少的拉扯感。想的比做的多是非常有落差感的事情，我见过很多年轻人无法处理这种落差，较少的经验会让他们认为想象的是他们拥有的。这里我并不是说这种想法有什么不好。相反，我认为这是一个必须经历的过程。并不是逃避就能解决问题的。落差感带来的痛苦的克服正是我觉得做自己的事业最难的部分，每当你靠近理想的火炬的时候（想象中）天空突然下起大雨。淋湿的感觉纵使平白无故的感受也会觉得不愉。痛苦成就的确实闪光的东西。或者说不同的东西。 回到技术方面上，DO IT First 要求你按照作者的思路走一遍，我认为学习最好的方法是无我，这说的形上了。但的确如此。打碎自己，重铸自己得到的越多。先做得到的还有对技术的初步了解，这也是 DEMO 的作用。这样去围绕技术的想法不是无根之萍。好的想法确实是根植于生活的。换句话说，根植于经验。 之后就是快速迭代的事情，迭代更新的部分看自己的姿态放得如何。当你觉得自己足够好的时候，迭代就是锦上添花。当你姿态放得较低，想要获得的更多的时候（你把学习的对象视作英雄 -《千面英雄》），一个重构的过程，重塑，也是重生。我使用 Chrome 的书签并不久，之前使用放弃的主要原因有 浏览网站少 浏览网站无价值 重要网站能够记住 现在使用最主要的还是积累，因为不可能了解到每一个技术了，不仅是喜好，还有精力，但是有一些使用就能增加生产力的东西，不适合现在投入精力，记录势在必行。刚开始的时候是直接收集到标签栏。后来开始第一次迭代，进行了简单分类，根据属性分类，把属于同一个属性的东西放到了一起。第二次的做法是按照了功能分类，不同的使用方式，或者说作用域，分成了不同的文件夹，相同属性的东西则归在了相应的子文件夹，这里的描述不是特别准确，我也认为没有必要，每个人自己的分类方式不同。这是现在样子，同时也表达了我在关注些什么，之后会考虑把 tools 放到 library 中，或者把 Library 拆解出来。 迭代最重要的看了上面不能理解的话我就直接说了：最重要的是找到边界，不然没有尽头也会混淆视听。无法联系，无法中断，无法继续。 无序是可恶的状态，混沌是最初和最终，有序的均衡会让我们无感。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>观点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%A8%8B%E5%BA%8F%E5%91%98%2F</url>
    <content type="text"><![CDATA[程序员这篇文章是由近来贴近程序员生活之后有感而发 想到什么说什么是一种很轻松的体验，而这篇文章也会是这样的方式，讲述我的想法在思考中的变化，就好像你也跟着我思考了一样。 语雀关注者的问题 最开始，我很奇怪为什么会有人关注我，出于好奇（果然还是因为年轻）点开了他们的主页，发现他们并不是知道我做了什么，或者说是仅仅知道我有语雀账户。他们关注了几乎能找到的每一个语雀用户。原谅我找不到一个可以看到所有语雀账号的广场，所以我认为他们应该是一个一个用户名搜索到这些人关注的。 他们为什么要关注 关注的时候，虽然对方并没有关注自己，但实际上现在这样的语雀环境下，关注不仅是不在迷路，或者说是把自己想关注的人整合到一起。更像是递给了对方一个名片，给了对方一个联系自己的方式。我觉得这是一个很好的做法，会推广自己才能做到更多的事情，（弄的我都想去关注很多语雀的人了） 这样做值得吗 我认为是非常值得的，语雀首先没有一个公共的广场，如果有一个语雀的slack我肯定很愿意加入。相互了解仅通过热文章的方式（我认为这样限制也很好）同时，现在使用语雀的受众我觉得也是非常值得关注的，我是一开始使用语雀就被完全吸引了，而知道语雀的人现在并不多，语雀是一个非常纯粹的知识库平台，我觉得就像是新生的GitHub一样。在现在这个时间段使用语雀，或者说是能接触到语雀的人已经有可以相互欣赏的基础了，想想身边各种各样无法欣赏的人再想这一圈子的语雀使用者 提升效率 我是刚入门学习编程，编程是一门很酷的技能，也有很多人认为他是艺术。 所有人都会经历入门的阶段，无法避免的，都会有一些共通性的问题，比如如何学啊，效率如何啊，效益如何等等，这是学习其他的技能也是一样的，没什么太大的区别。 有些人说编程更像一个工具，他只是实现想做的事情的时候使用的一种方式，方法。很多时候不用编程也可以解决。 学习编程应该知道他是一个工具的来学习他。 也就是说我需要什么功能，我才用这个工具来做成她，当然，很多事情的解决方案是一致的，或者说现行一类的东西，他的解决方式已经有较为固定的边界了，事先学习这一类边界下各个功能需要使用的各个工具。可以预见的就是之后如果做的是自己想过可能会做的东西时，就会大大减低学习成本。 想做一个东西，实现一个目标的时候，可以视作为一个考试，而事先学习就是预习了考试要考的内容，实际应用的时候就是开始学习这些东西，而做一些小例子就是一些例题。框架可以看作是一个标准的解题方案方法，虽然你用其他方式也能考试通过，但是为什么不使用方法来变得更好呢，因为说到底，编程只是你用来实现目标的方式，拿考试来说，你不参加考试，直接托关系修改分数也能通过考试，实现目标不用编程也能做成，只是使用的工具不同而已。 一是学习编程的时候，要找好边界，找到深度的边界和广度的边界，就能知道自己学到什么程度就够了，再投入更多的成本就不适合了（因为不是你学的每一个功能都能派上用场，甚至有可能平时做事工作只会用到不到百分之十的功能） 这是因为学习一个东西，其实不是万事开头难，开头的时候是学习效率很高的，我是指的同样的付出和收获，并不是说学习速率。 结语：编程是为解决问题而生的 程序的进阶 编码能力最近发现编码能力真的能看的出来，同时编码能力高的人能很容易评判更低的人的编码技能。而不是我之前想象的编码能力在代码中，需要很是花心思才能分析的出来。也就是说，在编码能力强的人眼中，其他人不同的编码能力高下立判 程序员的呐喊程序员真的是能将世界分成三种人，不是程序员的麻瓜，程序员，数学家，哈哈哈，新笑话出炉了。《程序员的呐喊》是收录的具有极多争议的博客，出自现Google员工雅戈之手。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>程序</tag>
        <tag>影响力</tag>
        <tag>愿景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坚持的复利]]></title>
    <url>%2F2019%2F05%2F11%2F%E5%9D%9A%E6%8C%81%E7%9A%84%E5%A4%8D%E5%88%A9%2F</url>
    <content type="text"><![CDATA[坚持的复利 1这里确实是一个很不错的博客平台，能写的东西也非常的多。如果不是可能有图文的话，做成播客也未尝不可。 博客这个还是适合一个人的时候来写，伙伴们都在的时候其实直接交谈来的比较好。自己一个人想很难想出来什么东西的。大抵是对之前的一些思绪的整理然后在总结一下经验这样子，就像个人思考一样，或许写博客也是这样。或许写博客就是技术人员的冥想呢？ 2自己一直以来坚持的是什么东西呢？总是想要实现自己的人生价值嘛？在改变之前，我好像与欺诈寸步不离，每一个行动或者话语，都是为了掩饰和伪装。就像十句话，九句是假话编成的真话，还有一句真话编成的假话。那时候常常认为能够把握住人性，虽然确实能够更加分析透彻一些，但是副作用也是非常大的。伪装更像是保护，好似不得已为之。长期这样做的情况就是骗自己的能力特别强，其实不骗到自己又怎么能够骗到别人呢？这样的我在阳光的照射下非常疼痛，好似之前的厚皮都被晒的脱落一样，渐渐的会有一些改变，骗过自己之后的表里如一确实是和真正的表里如一有所不同。至少现在感觉非常舒服，或许是不用思考什么东西来试探，或者是说坦诚降低了很多的交流成本。 3常常感到孤独，又会觉得只有享受它才能提升。思考往往也是个人的事情，如果没有一些痛苦的煎熬，自身也是很难改变的。江山易改本性难移，向来也是因为思考的不够充分。又或许只是没有做好基本选择。 技术猫想要做出点什么事也是非常困难的，需要有一个共同的努力点将大家联系起来，这上面又有很多交流的问题了，还好我现在足够坦诚，也能够告诉自己，耐心就是鱼和熊掌兼得之法。 事实证明，只要坚持做一些东西，就能很轻松的看到进步，比如昨天我被子盖好了，感冒果然就好了很多。另一方面是我坚持好好睡觉了很久，某一天没有垫枕头，然后就感冒了。当然我觉得也有飞哥传染的因素。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编码]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[编码 1后台学习群的创立是想知道网上是否有很多人愿意加入一个学习组织，由此发现了一个浙江仔加入技术猫。当然，其他的人员相较于技术猫来说有点不堪入目。如果想了解后台学习群是什么可以看这个https://www.yuque.com/idiots/readme/it6zk5 另一个初衷是我在后台学习的时候有什么感悟就可以直接向里面发，可以是交流，可以是倾诉，可以是引导。但最主要的还是不用负责人。向群里发心得就像是在印象笔记中记日记一样，我以前爱这么干。个人思考的日记的确在写作的时候不应该涉及到交流的问题。在完成后如果能够交流或许是合乎道的。更何况群里的孩子都不认识我，最开始的尴尬也免去了。或许有个机会会再更新一下这个后台学习群，更新一下人员，还有规则（踢人之类的规则）。我在其中实际扮演两个身份，一个是后台学习群的创立者，默认也会是维护者和这其中的教学的人。另一个是我作为一个社区的成员，我需要的是向其中输出我想说出来的东西，同时我也不需要考虑影响。重在交流嘛。作为创立者来说，当然希望有一个好的发展，比如能够拥有一个自己的知识云和团队，当然其中还不包括我，仅由他们这些组成。我也想过把这个当作技术猫的元组去带，或许能作为一个试探找到一个模式。 因此其中的学习模式也是向着技术猫靠拢的。首先几个周或者几个任务是直接熟悉语言语法，但是非常少短简洁。之后就需要的结合项目去实践。也就是 DEMO 式驱动。发现如果不存在mentor的情况下，他们很难自主的进行。或许这也是技术猫想要扩展的时候的难点。还有一个是华电的技术猫社团，自从技术猫作为一个组织之后，华电的社团就是技术猫的第一个学校元组。当然第一整个元组是我们啦。在华电技术猫社团的时候，我想当他们不来办公室的时候维持了一个每天在群里询问一个人他的学习状况的模式，或许在这个时候，所有的其他成员也能领会到一些东西。这应该是一个值得记录的模式。除此之外，还希望能做到一个群内分享的模式。就是说，在同一个团队下学习的时候，自己看到什么值得分享的就发送到群里，不仅是华电的学习群，也会包含之后技术猫的各个元组，交流才能促进交流，比如：后台学习群。当然，如果仅仅是发送一个链接到群里也只是石头大海，其实这个我想了一个办法。当你想分享一个东西的时候，你想到的团队的第一个人，在分享的时候艾特他，同时随便说几个理由。这既是在群聊里共享，也不会造成零反馈的现象。不过，也不是只能艾特一个，自由配置呗。 2 我自己的学习我常常思考，我为什么做技术猫这件事。除了想做成事本身之外，是什么在驱动着我前行。这一次思考是由于袁合金老师在他的课上说，如果我下一次还旷课，就拒绝让我参与考试。我想了想，啊，已经很久没有真正的作为一个学生生活了。我完全脱离了中国的大学生模式是因为什么？ 没有离群的时候最不需要思考。离群之后，就需要了，他会产生一种强大的引力，如果没有不断的思考明晰，没有确定的愿景，就会被拖回群体中，等待下一次的支流或者支路。或许也是越思考越离群越孤独，还好能够在技术猫有一起走支路的人哈哈哈。或许有一天能够把这条路变成主路啧啧啧。 学习应当是有计划的，万幸我虽然愚笨，但是给自己的计划还算勉强够格。我给自己宏观的一两年生涯做了一个小目标的集合，或者说是里程碑的确立。在技术猫之后，就会想的关于更长时间的期望计划了：例如十年。我有一段时间非常想提升编码能力，总认为一个功能的实现是非常酷的一件事情。后来发现想做的不止是码农，想要成为程序员，这也会来到技术猫才开始想的事。或许读闲书真的很有益，就像一个长期投资，每多读一些书就像是给自己的油箱灌油，每一次思考的时候会燃烧，来帮助🚗行到离群更远的地方。 每日总结是必要的，我曾经的每日总结总是记在个人的本子里，现在准备作为博客。当然这不是开源也要把日记开源的意思哈哈哈，自由的嘛。主要还是在初入门的时候，实在总结只能推及个人，没有对这个行业的理解自然总结也不会有什么阅读的价值（对于别人）。现在也算学编程有 6 个月了，入门之后会逐渐有一些自己的思考。我最开始觉得编码很酷时。是因为在最初理解程序的时候。觉得每一个都非常简单，觉得每一个需求其实就是一个系统的抽象概念的增删改查。比如负载过多就熔断这些机制，在还未学习编程的时候觉得这些东西随意就能想到，后来发现确实编程中的各种解决方案是从生活中来，历史中来，生物中来，虽然本质是数学，但是建立在实现上就不得不和其他事物结合了。经验丰富的人往往能想到非常多的解决方案，这个经验不止是编程，也有生活。我在未入门之前渡过很多的书，实际上也是经验的存储，小时候也进行工业制图，机械和电气设备都是在车间实打实接触，自然很多工程化的东西或者系统优化能够有所知道。后来发现 coding 其实生产力很低，只有非常编码能力强的人才能够做的很好，但实际上也是单人效率的提升。这个时候我是非常想提升编码能力的。再后来发现，编码能力再强，对于普通人来说也有一个限度，这时候真正重要的是设计。设计不仅是简化问题，还有一部分是借助力量，比如别人已经费心费力花了很长时间生产出一个工具，直接使用当然又快又好。设计不仅是编码行业的问题了，既要在这些上面有一定的了解，同时还有各种领域的知识的堆砌。提供的会是系统外的思考。这样想来，之前认为编程非常好设计是因为不在这个行业内，首先视角是系统外的，能设计出很多解决方案和技巧，这时候当然会觉得简单。或许是工程师的思想就能提供这样的解决方案足够了。但实际上方案的落地是多方面的，甚至很多你构想的技术都还没应用过，或者说你想过的系统设计早就证明了不可行或者效率低下。这就是只有在行业内有所经验才能够知道了解的。他们的这个经验能让自己的设计最开始就避免一些错误方向，至少不会不能用（或许）。 总结是省己，也要省人，也要对环境关注，每天抽出一点时间专门浏览自己感兴趣的信息来源。比如晚上浏览一会儿GitHub的项目推荐，然后不错也可以推到团队中关注，浏览一会儿某一些问题。想想来源和答案，看看别人的解决方案来触及思考，思考怎样又能获得进一步的改进。当然作为仅仅的环境关注，就是找到一些感兴趣的东西啦。如果真好这个也是团队里感兴趣的就可以一起分享。分享促进的交流思考是最重要的。 编码能力慢慢就会提升，只要时间够，这个是完全可行的。 编码能力再强，限度还是非常大的，coding，一人敌，不足学，学万人敌。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>总结</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生活是不断的用生命去交换]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%94%9F%E6%B4%BB%E6%98%AF%E4%B8%8D%E6%96%AD%E7%9A%84%E7%94%A8%E7%94%9F%E5%91%BD%E5%8E%BB%E4%BA%A4%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[生活是不断的用生命去交换 一蹴而就的结论 关于解决问题我又有了一个新的想法人们问可能解决自己问题的人的时候都是直接带着自己的疑惑点的。但是如果是确实没有处理过这个问题的经历的人，他如果要解决这个问题就是需要自己顺着别人的思路，或者说是别人的思考重复一遍才能解决问题别人一问问题就能够直接回答的人一定是亲身经历能懂的。让我想起了关于得道者的想法直接拿自己想出来的东西问别人懂不懂真的很不公平，连自己都是思考了那么久有那么多的因素帮助思考才想出来的，怎么能断定别人在听到结果的时候马上就也能想出来呢？ 交换不了只是缺憾罢了 想了想最近最有所得的一件事，就是一件事情，你看做当前非常重要但实际上，如果你没有做到仅仅是一个缺憾罢了，对人生来说，又不是不能用 找到自己的路 问题： 无论是作为个人还是作为团队的一员，您如何最好地工作？ 您在学校或工作中遇到了哪些挑战？您是如何克服这些挑战的？ 您的哪些技能或经验将成为角色中的资产，为什么？ 具体说明您曾经工作或管理的项目。结果是什么？你是如何衡量成功的？ 如果您在志愿者组织或兼职工作中担任领导角色，请告诉我们。团队有多大？你的工作范围是什么？ 时间为精 我现在的思考常常需要事物的引发，要不是偶见事件，要不是看书有所得。在没有这些引子的时候，我正在逐渐失去凭空想象的能力随着年龄增长。果真是少年时，好春光。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>生命</tag>
        <tag>代价</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立游戏]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%8B%AC%E7%AB%8B%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[独立游戏最近试玩了很多款游戏 游戏都是试玩版，或者说是测试版。这样的游戏很多税收不用上缴同时可以享受很多福利政策，当然申请下来版号也是限制之一。 感觉最近大热的是手机独立游戏，无论什么样的游戏都期望能来到手游市场分一杯羹，当然有的赚得盆满钵满，只需要一点点的诚意，大热IP，已经验证过的大火游戏模式，简单有效的拷贝的数值系统，鼓励性的氪金行为，手游市场虽然看似竞争激烈，但是中国这么大的市场下来，喝喝汤对大部分“有志之士”还是轻轻松松的。 一旦有一个成型的运营模式，躺着赚钱是这类别的真实写照。 感受了下大概最近玩的游戏分两种，一种是结合创新，这种开发周期通常不长，重在美术换皮，但是内在逻辑是“参考”的已经有游戏受众的游戏。仅是如此，挑剔的玩家是嫌不够的。他们会批判这种行为（小部分），剩下的大部分玩家实际上是盲从，评论区的高票就是他们的风向标。通常这个时候，厂家或者有心思的就会做一点点创新，给照搬的独立游戏上很多的模块，当然，同类型的游戏内在逻辑再创新也难以翻出花来，同时也有一些可悲的玩家玩不到好游戏降低标准要求的缘故。 另一种首要主打是，“独立”！通常会在自己的首页，游戏推荐首页说这是我一个人担任所有职位，（我们一个怀着初心的小团队，少至两个人，程序员和美工），一点点攒出来的游戏，为的就是自己当初的初心才坚持做出来，希望大家喜欢。这些独立游戏开发者大多数都是一个人从零开始学习编程，学习画画或者说是建模，把一个游戏包圆了做出来的游戏，当然这类游戏是个人可控的，除了一些个别的天才想法（其实我认为还没看到过）。大多数都是受当时的（几年前）游戏玩法启发，换上了自己的游戏场景，相当于以前游戏的二次开发。（说到这里我不禁想到，如果这些游戏的开发者开源引擎，这会给开源和这些努力学习的独立开发者多大的捷径啊，当然几乎不可能）可能这些独立程序员也只是想着这是自己的梦想，坚持了几年夜以继日慢慢的攒出来就好。 没想到的是现在的玩家就好这口，有一些人明白了不给这样的独立开发者甜头就没有游戏业的多样化发展，刻意引导一些无知的玩家，（我认为是好风气）。于是很有一些独立游戏小火了一把，有些人看着也想分一杯羹，而有些已经得利的人想换皮再捞一次利益，有些人可能会坚持自己的初心继续走原创的路子（真少，我的观点是人的创意是有限的，特别是很花了几年时间在他的创意实现上，坚持也是非常耗费精力的） 我顺着时间倒退了一些场景想到了这些，同时我感觉可能也正是那个时候，安卓应用开始火爆，做一款app的难易程度陡降，正是这些可以预见的实现方式催生了这些想法的种子，给予了他们土壤。再回到我刚才的奇怪想法（如果一类的游戏引擎开源，技术简洁有力，相应的更多的精力解放出来投入到创造中去了）编程本就是创造性的工作，正是各种各样的工具，库，语言使得这项创造成为可能。 再思考一下，这些app正是当年那些认为app可为并投入想法的人制造的，我相信当时肯定有一大批人心思投入到了这上面，实际上出来的成果大家也是看到的，能有几个呢？只剩下几个坚持这个开发流程的人了。大浪淘沙，一代环境一代开发者。想必之后的游戏环境会更加好吧？毕竟再小的概率，在中国这么大的环境中，也是一大批人，能做出来一个个矮子里面充高个的游戏，再逐渐的感染整个环境的。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[统一]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%BB%9F%E4%B8%80%2F</url>
    <content type="text"><![CDATA[统一 成长 人在不同情景下有不同的身份，在某一个环境下的成长或许暂时只会影响这一方向，需要等人在其他情景下也统一内化之后，才是各个方面都有了成长或者说整个人把这一步成长内化了。 做事 总是感觉有很多事情没有做的时候，可以选一项事情说，我就只做5分钟，现在就开始。通常你做的时间都会持续超过5分钟，或者到做完。 工作状态 人的各项机能都需要唤醒，如果只是光靠想来唤醒，无疑是非常困难的。就普通人而言，进入状态最简单的就是直接动手做这件事。这就变成了行动力的问题]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[包容试错]]></title>
    <url>%2F2019%2F05%2F11%2F%E5%8C%85%E5%AE%B9%E8%AF%95%E9%94%99%2F</url>
    <content type="text"><![CDATA[包容试错常常会有想做但是怕做错的事情 后来渐渐明悟了些许 常常做错的事情，在之后看来，造成的后果是什么？ 我认为是一种经验换得的缺憾 确实需要尝试实践才能知道一些做事的相对对错 如果有例子的话好像讲述例子效果更好。 这可能也就和以史为鉴类似了 知进退，明得失 也是尝试之后获得的经验帮助指导的吧 试着去做一些不确定的事情 克服一下对自己失败的厌恶 包容的前提是反思之后不会罔顾经验再次犯错 这样似乎比理论来的更速成呢？]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一场长达十二小时的斗争]]></title>
    <url>%2F2019%2F05%2F11%2F%E4%B8%80%E5%9C%BA%E9%95%BF%E8%BE%BE%E5%8D%81%E4%BA%8C%E5%B0%8F%E6%97%B6%E7%9A%84%E6%96%97%E4%BA%89%2F</url>
    <content type="text"><![CDATA[一场长达十二个小时的斗争昨日凌晨，当地有名的哲学家杨小睿于侧殿阳台入睡。 睡前，对起床闹铃的设置一事与自己进行了激烈的思想斗争，最终敌不过上眼皮和下眼皮的亲密接触，随意定下。 刚进入睡眠时，一切相安无事。窗外夜黑风高，正是做梦的好时候🤔️。 于是顺理成章的，哲学家梦回故里。 醒来时已是午后，个中滋味，唯有本人才能体会。 无论如何，一天就过去了。 明天又是新的一天，不是吗？]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learn-From-Code-and-Record]]></title>
    <url>%2F2019%2F05%2F11%2Flearn-from-code-and-record%2F</url>
    <content type="text"><![CDATA[Learn From Code And Record OverView最近试了试新的方法在学习一段代码的时候，抄代码。 因为平时都是使用别人的函数，一目十行的习惯，只求输入输出，不求内部构成。把代码都当作黑箱来使用。在学习的时候就会不自觉跳过一段稍微难理解的部分，或者是一行短小难见的调用。 在抄写的过程中，会给大脑留出时间思考，同时也能够注意到平时注意不到的代码。 通常抄写这部分之后，就可以画出大致的流程图和各函数之间的关系了。 Example抄代码不止是代码，注释中的例子或者 sample 也可以抄写。在抄写实例的时候，同时思考的是这个代码的使用流程和它的适用范围。 通常抄写完实例之后，就可以将之前画的图简化，同时能抽出该代码的核心部分表示出来了。 Exercise用刚才给大脑留出的时间使大脑思考出的各种代码想法和小应用可以写出小 demo 。写完之后可以看看自己构思使用的途中出现的实际问题，然后照着问题可以把学习的代码包装成自己想用的模样啦。 VIa.附上抄的照片 Record通常一些博客会记录博主的学习代码记录，但是非常纪实，就像记日记一样。换句话说，技术性不强。当阅读这种博文的时候，就像是自己在用别人的思维方式看要看的东西一般，很难顺利延拓想法和应用，只能说快速的学习了这个应用方式或者提前预知了要踩的坑，甚至使用的时候，该踩的还是要踩坑。还有一类技术类文章，写出来就像是源代码的使用文档一样，有些会提出可能的坑，有些不然。 我的想法是既然要记录，一定要首先保证对自己技术方面等有用。不会污染自己的记录池，不然连自己都不愿意在里面翻找了，或者说翻找的时间和找到的收益不对等，还不如自己重新再看。 通常会有的是一图胜千言的说法，这也是很多人崇尚的，到处都能找到就不再赘述了。我就只说说我的观点。 图一定要画，但一定要简洁明快，表达的是核心，无论是代码的核心还是当时想法的核心，出自自己之手通常都能快速想起。也就是说可以随手画图帮助理解，但是做记录的图要多精炼几次，精炼的同时其实也相当于又看了代码，即使只是在精炼这一小块图。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>guide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[年少不懂事]]></title>
    <url>%2F2019%2F05%2F11%2F%E5%B9%B4%E5%B0%91%E4%B8%8D%E6%87%82%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[年少不懂事班主任就我不上晚自习的事情给我谈话班：“我看了看你的成绩，你上学期的成绩不错啊。”我：“嗯·当时年少不懂事，花了点心思学习。”]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>哈哈哈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoneWithWind]]></title>
    <url>%2F2019%2F05%2F11%2FGoneWithWind%2F</url>
    <content type="text"><![CDATA[Gone With The Wind TOMORROW IS ANOTHER DAY.]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>quote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学编程没什么用]]></title>
    <url>%2F2019%2F05%2F05%2F%E5%AD%A6%E7%BC%96%E7%A8%8B%E6%B2%A1%E4%BB%80%E4%B9%88%E7%94%A8%2F</url>
    <content type="text"><![CDATA[1 上班的男人阳光从窗户照进了房间，照到了我的床，我的被子，还有我累躺下后未摘的工牌。 “又到早上了啊······感觉才没睡多久······”我挣扎着把闹钟关掉，从床上坐起来。 又开始新的一天了，我打开手机，上面弹出了很多消息 业务群晚上也不停歇，好像大家工作不下班一样。 每月的账单又是负债。 一睁眼，就要为生活开始奔波。 我收拾完毕，开始在地铁站继续度过人生的两小时。 生活就像这个地铁站，无法停止，无法终结，无法联系，来不及做出什么就只能随着人群向前走 20岁的时候，我喜欢谈论梦想和意义，可是现在我的脑子里全是数字KPI、房贷、信用卡 在挤地铁的两个小时中，我反而不那么烦躁了。 这两个小时我用来学习新的编程技术，不为工作学的技术 而且···这样我才感觉我没有浪费自己的人生。 不同的技术就像一个个港湾，技术能带给我在幻想创造的蓝海中想象的翅膀。好似能够乘着代码在清澈的蓝天中悠闲的飘着。 每当我开始思考学习新的语言，框架，就好像被抽离了那个挤得透不过气的车厢。 甚至暂时脱离了现实的生活，穿越到了想想中的那个计算机世界中。 当我心情不好的时候，我就会沉浸在程序的世界中，开始创建一个新的应用，为自己而构建，开始尝试一个新的框架，写一个给自己的博客。 “xx站到了，请乘客先下后上” 听到这个，我将手机锁屏，叹了口气放入了公文包。 人到中年，疲惫和麻木就是生活的常态。好像很多东西都已经没有了意义，也不明白自己的到底是为了什么而活着。为了自己？还是为了债务？还是为了家人？ 好像混日子就好了，可是我还是想做一个骇客，向无趣平淡的生活刺出创造性的长矛 2 未婚的女人我趴在床上，高兴的翻阅着框架文档，一行一行的读着。被这一项新框架能做的超酷的事情所震撼，迫不及待想要尝试一下。 “铛铛铛”敲门声响起 “女儿！亲戚们都来家里了！你出来坐会儿！” 母亲边敲门边大声吼着，整个寝室都回荡充斥着他的声音。 我看了看文档进行到了哪一步上，叹了口气 “好，来了～” 来到沙发上坐着，我开始接受阿姨叔叔们的狂轰滥炸。 “怎么小姑娘都不出去社交的呀，光在家看电脑呀？”这是一个阿姨 “你现在有囊朋友了伐！就知道玩电脑”这是我二舅 “别把自己读成书呆子了！”这是我小姨 “你看那些有什么用啊，能换几个钱💰”这是我远房表姐 我实在听不下去了，猛地站起来。 “您说的挺对，其实学编程真的没什么用的。我知道你们觉得是玩电脑，但···” 我想说是技术，编码是真正的创造，还是没有说出口 “妈，我今晚约了朋友，不在家里吃了。”我找了个理由。 “哎呀，你这孩子，今晚一大桌菜呢！”母亲一边在厨房鼓捣着，一边对我喊道。 “妈，我出去了” 我趁母亲还在忙，赶忙穿上了鞋出门，重重的关上了门。好似把嘲笑我代码不能当饭吃的人隔离在外了，他们不懂，我的技术想要变现很容易，我想要的是创造，我心中的梦想。 ······晃荡着思考刚才的新技术可以帮我填充我想做的东西的那一个部分···· 我估摸着时间差不多了，这个时候应该大家都走了，我就回到了家。 “妈，我回来了，他们呢，走了吗？”我知道他们都走了，门口的鞋柜已经没有他们鞋子的踪影了。 “走了，桌上还有吃的，你自己弄点吃吧。”母亲笑着说。 “嗯，谢谢妈。”我上了饭桌，饭菜已经热过了。 “你今天怎么了？平时你可不会这么没礼貌。”母亲在我对面坐下，开始和我聊天。 “每年回家都要说我是”宅女” ，问我玩电脑有什么用，我真的好累。” 我对这些亲戚而言，可能就是一玩物丧志的人吧。 “其实还不是关心你嘛，你耐心点跟他们解释” “学编程对我来说就像机器猫的任意门，每学一个技术就是进入了新世界的大门！” “学习 C 的时候，我仿佛能听到机器飞转到最高速时的声音和一种莫名的香气。” “读 Js 各种框架的时候，我仿佛也各种模块信手拈来，随意使用。” “每逢雾里看花，不够真切的时候，我就会想起if(FALSE == true) TRUE = false; if(NULL == exist) exist = NULL;“（假作真时真亦假，无为有处有还无） “窗外冷雨的时候为自己打气 “····”手持一把锟斤拷，口中疾呼烫烫烫” 我和母亲异口同声的说出来。 我前倾着身子，越说越兴奋。 “那些大牛的博客，hacker 的论坛更带劲，都是思想家在我的脑海里交锋” “每一个技术，语言都是一个世界，赚钱是很重要，但是黑客精神也很重要啊。” 母亲微笑着 “妈妈真的很为你骄傲” 我叹了口气，拿起来的筷子也放在碗上：”很多人都说学更多的编程无用，如果非要说编程有什么用，那就是以“有没有用”去衡量世界上的一切。“ “现在想通了？不生气了”母亲笑着说。 我想通了，编程是为自己而学的。The wisest men follow their own direction.何必和他们这样争辩生气呢？”是的，谢谢妈～” “不过你交男朋友这事儿······” “哎呀～妈你说这个干啥～”我端起碗开始吃饭 3 蹭课的男人xx大学，保卫处 我拿着一本《编译原理》看着，桌上还摆着执勤签到表。 “还看呐？我跟你换班了，你回去休息吧。”同事从窗口探进头来，手上还拿着刚买的果汁。 “这会儿没什么事儿，我抽空看看” 我笑着对他说 “光名字我都看不懂，你看这些有劲嘛？”同事也带着笑意，不是嘲笑，却有点不理解。 “这个我也说不明白”我摊了摊手。 “不瞒你说，我就是觉得读书没劲才来北京的”同事好似想起了什么，对我说。 “啪”我把书合拢，厚重的书就像一个厚重的门。 “到点了，不说了，一会儿有个课我去听听。”我给同事交接了岗位，循着课表准备去听一门语言选修。 路上，我还是想着同事的话 “读书没劲” “为了自己的想法学习也没劲嘛？” 我不禁回想起了六年前 ······ “上学真没劲啊！还是去玩游戏吧”我们一群人走在上学的路上。 “我们都打算念完初中以后不念了。你呢，小超？”同伴问我 我看着前面那个心仪的女孩，笑了笑： “嗯，我也不念了吧。” ··· “小城市真没意思啊。”毕业后，心仪的女孩问我 “我们打算去北京闯闯，你呢，小超？” “那···我也去北京吧。” ···· 这样一想，我来到这里有四年了吧。 我想起了我刚来的时候 ····四年前··· “今天的计算机科学导论就上到这里，我有一句重要的话跟大家说，这句话可能对你们终身受用” 「我想和大家说～」 我凑近门边，看着教室内的女教授 “有些人只是作为生物意义的活着，真正作为人生活，是要有独立人格和独立思考的能力的，今后你们可能是构造出各种各样的应用，需要想一想，到底是为了什么而做出这样的程序。编程的确是用来节约人力成本的，但是编程更像是艺术，发挥的是创造。创造力才是人最闪光的一点。” ··· “创造才是人最闪光的一点”这句话，是我一直以来不断重复咀嚼的东西。 我推开了教室的门，心里还想着”怎样才能创造出一些东西。” “小超，你又来蹭课啊？” 是小雷，每次蹭课都和我一样坐在后面 “是啊，虽然听不太懂，但是听懂多少算多少吧。”我腼腆的笑笑。 “我可以给你讲讲啊”小雷来了兴致，开始给我讲起了老师这节课重要的点是什么。 上完课，小雷又带我去图书馆，借了一系列的书。 我抱着这些书，心里不知什么感觉，回到了保卫处 “你咋这么多书呢？”同事在外面站岗。 “嗨，闲着也是闲着，看看长见识。”我看开了些东西 “读这些玩意儿有用吗？” “我以前也觉得没用。可是现在我觉得，看这些书我才能知道计算机，网络，这些机器运转的规则，不能别人说啥就是啥。数学、逻辑，真的很美。 很多事得靠自己琢磨。 再过几年你就明白了，好了，不早了你也快回去吧。” “哦”小马摸着脑袋离开了保卫处，似懂非懂的样子。 “学计算机有用？还是没用？” 我看着自己写出的应用在朋友中广受好评。 “我也是后来才明白” 学编程没有什么用 它只能给你一只迎难而上的长矛 它只能给你一个畅想的精神世界 它只能赋予你发挥自己创造力的技能 编程，可以让你成为一个骇客。 编程没有什么用 但这世界上的一切 并不都是以”有用”与否去衡量的 愿你拥有一段无用的时光 愿你开始创造自己的第一个世界]]></content>
      <categories>
        <category>故事</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>故事</tag>
        <tag>创造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怎样学习编程：我第一月使用的资源]]></title>
    <url>%2F2019%2F03%2F07%2Fstudycoding%2F</url>
    <content type="text"><![CDATA[我是如何开始学习编码的：前一个月我用过的资源 想学习如何编程？本文将指导你经过技术和资源的丛林，帮助你从无知识到构建快速、互动、现代的编码知识，沿着我走过的林间小径。 从八月底到十二月初 我花了一个月的时间学习编码，虽然有时候很有挑战性，但这是一次非常有益的体验。 最棘手的一个挑战是选择什么样的学习和在那里学习它。有这么多的语言，框架和库 - 以及许多相互矛盾的建议。 此外，一些学习资源比其他学习资源要好得多。如果我知道要关注哪些资源，我的进展可能会更快。 本着这种精神，我想我会分享对我有用的东西。如果感觉很多，我很幸运，我每天可以花几个小时学习这些材料。你做得多快并不代表你作为开发者的潜力，所以不要担心是否需要更长的时间来完成这些材料。但是，如果你能投入时间，可以在半个月内完成。 这些是我经历过的路程，并不代表你需要全部走过 第一部分：HTML，CSS和JavaScript这些是所有Web应用程序的三种核心语言，并且（几乎）不可能在不使用它们的情况下在Internet上构建任何内容。 HTML如果你以前从未做过任何编码，那么HTML就是一个很好的起点。它是互联网的核心构建块，与大多数其他语言不同，它为学习者提供了他们正在编写的代码的即时可视反馈。 CSS CSS是HTML的自然伴侣。从表面上看，它非常简单，虽然有一些概念 - 特别是与布局和定位有关 - 可能需要一些时间来解决问题。 CSS最困难的部分是理解布局。用户在StackOverflow上询问了我的大多数布局问题，因此快速的Google搜索解决了我的大多数问题。 H5 和 CSS 大概花去了我两天时间，通常你想了解一个编码方面的事物时，直接上手总是最快捷的方式。 JavaScript HTML和CSS不是完全成熟的编程语言，因此在开始学习编程语言之前，您将无法完全了解编程。JavaScript是Web的编程语言。 平心而论，虽然我在初中时期尝试过 js 编程，然而连真正的编码都算不上，直至现在我也是 JavaScript 的菜鸟，所以这上面我并不能给予一些帮助建议 由于我开始学习后端，js 从熟悉拼写到知道历史花了我一小段时间。 GO Go 是极其酷的语言，尤其是在现代进行高效的 Web 编程方面 Go 是我学习后端被选择的语言，同时也是我越学越看好的语言。作为语言初学者的时候我还无法分辨各种语言的特性和好坏，这通常需要多年的编码经验或者有过使用多种语言的经历才能清楚。我经历过 C++ STL 的使用和一定的 Java 编码，但是从过来的眼光看待，不过是十数天就能达到的程度。 在 《The Way To Go》上我花费了大概三天时间，在此之前我阅读了菜鸟教程上关于 Go 语言的入门指南。虽然这本书对于 Go 语言的高级特性讲的比较简略，作为入门无疑是够的。即使我看的是英文，或许你也更喜欢拿着中文书籍看，但是作为编码人员，无疑英语才是必须学习的语言。 之后我进行了一个小爬虫的练习，涉及到 goquery，gocolly 先爬取的飞卢的小说网站，之后爬取的各个地区的各种商业信息。这大概花费了我一天的时间。（从这里学会的阅读文档的知识） 随后我开始了 Go 源码包的阅读，将每一个包的每一个函数遍历了一下他们的 godoc ，在我开始每一个函数的内在逻辑阅读时，我被中止了，由于庞大的知识体系。这大概花费了我三到四天。（从这里学会的画图技巧） 我这个时候开始使用社团的 Mac 电脑，开始了一个关于发送短信的云API接入服务的开发。当时了解并接入阿里云市场给我带来了麻烦，从需求找到解决方法向来非易事。这大概使用了一个星期，了解了关于 go 与 mysql 的接入，和不同终端的 HTTP 通信 随后是轮播图的后台管理搭建，这里开始学习了表的设计，更多的了解了 mysql 的各种情况。 完成轮播图（考虑的越多需要做的越多，但是编码不一定会变多，应该是遵循幂律的）开始订单系统的设计，这是关于学习后台功能最难的一个部分了，同时我也花费了不少时间来进行查阅和设计，也接触有 gorm 的使用。做完订单系统的设计让我得到了极大的提升因为考虑了很多实际情况的适应。之后想必更困难的业务是游戏服务端了吧。 之后我完成了一个 app 后台的搭建，通过各个模块的组合拼接。这里的难点主要是在团队协作上故不在此详述。 到这里我的 go 学习历程就告一段落了。 第2部分：任何开发人员工具包的其他必备部分 Git和GitHubGit是所谓的“版本控制系统”，GitHub是最受欢迎的基于云的Git服务。简单来说，Git允许您备份文件，跟踪更改，与其他开发人员分享您的进度，以及协作项目。当你刚刚学习，并且不需要使用Git时，它可以感觉像是一件苦差事。但这是值得的：绝大多数专业开发人员不仅依赖GitHub（或类似服务），而且拥有活跃的GitHub配置文件可以帮助您确保工作安全。越早开始将您的工作交给GitHub，您作为开发人员的经验就会越多。 命令行命令行可以说是最重要的部分，通常了解命令行的操作是非常必要的。同时想要学习也很简单，不仅网上有很多教程，鸟哥的 Linux 私房菜也涉及很多，不过我对于工具的建议是如非必要，仅需了解。 使用Git的最佳方式是通过“终端”或“命令行”，这对现代Web开发人员也很重要，允许您通过NPM（节点包管理器）或Yarn轻松地将第三方包添加到您的网站。也有很多网站能够帮助你迈出这一步 ### 第3部分：下一步是什么？这就是我在前一个月学到的一切。 我要学习的内容包括 Kubernetes，Istio，gRPC等等。这是很多技术，而我（还没有！）能够告诉你任何有关于它们。最好也了解它们！]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>总结</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
